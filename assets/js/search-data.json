{
  
    
        "post0": {
            "title": "Tips and Tricks for research work",
            "content": "SSH setup . Setting ssh config file (~/.ssh/config): . Host FLIP # access point server HostName access.engr.oregonstate.edu User ONIDusername Host DGX # target server HostName submit-b.hpc.engr.oregonstate.edu User ONIDusername ProxyJump FLIP . Context: at OSU, FLIP server is our access point server and DGX server is a cluster server that I would like to access, so in order to access the DGX server, I would need to access the FLIP server first. The ProxyJump configuration states that if I want to access the DGX server, I would need to access the FLIP server first. This step is needed for VS code’s extension, Remote - SSH, to have access to the DGX server. . VS code to access cluster server . After completing SSH setup, do the following in VS code: . Install Remote - SSH VS code’s extension | Connect to the DGX server using Remote - SSH | Open a Folder and select the folder of your project | VS code to access remote Jupyter notebook server on the cluster server . After completing SSH setup, do the following: . Setting Port Forwarding, from a terminal: ssh to the server that you | Install ngrok and follow their setup (https://ngrok.com/) | Start the ngrok server: ./ngrok http PORT, replace PORT with any port | Copy the generated URL, for example https://ad32ef7ad45e.ngrok.io | | Setting the Jupyter’s Kernel, from a terminal: ssh to the same server as in step 1.1. | Access your conda/pip environment if needed | Generate a Jupyter configuration file: jupyter notebook --generate-config | Set Jupyter’s configuration: echo &quot;c.NotebookApp.allow_remote_access = True&quot; &gt;&gt; ~/.jupyter/jupyter_notebook_config.py | Set Jupyter’s configuration: echo &quot;c.NotebookApp.allow_remote_access = True&quot; &gt;&gt; ~/.jupyter/jupyter_notebook_config.py | Start Jupyter’s server: jupyter notebook --no-browser --port=PORT, replace PORT with the same PORT used in 1.3. | Copy the URL token parameter, for example ?token=... | | Connecting everything together! (in VS code): CTRL+SHIFT+P then type Jupyter: Specify local or remote ... | Select Existing then paste ngrok’s url + token parameter, for example https://ad32ef7ad45e.ngrok.io/?token=... | | (optional) to forward multiple ports, here is an example | # Create 4 tunnels, each for different ports, with only https enabled # This way the ngrok process stays bellow the Free plan limit (4 tunnels) # command: ngrok start --all # to start all of them # command: ngrok start note tb # to run jupyter notebook server and tensorboard server only # refer to this page for more info: https://ngrok.com/docs#multiple-tunnels authtoken: ... log: ngrok.log tunnels: # to run jupyter notebook server note: addr: 8111 proto: http bind_tls: true # to run visdom server visdom: addr: 8097 proto: http bind_tls: true # to run tensorboard server tb: addr: 6006 proto: http bind_tls: true # just an extra port available for any usage other: addr: 6969 proto: http bind_tls: true . GitHub Actions (CI) for multiple and parallel experiments on the cluster server . [TODO], example . PyTorch Profiler to profile your model (example) . [TODO], simple example . Tmux to open multiple windows in one terminal . Tmux is useful to have multiple windows open at the same time when ssh’ing to a machine so you won’t need to open multiple terminals. To do that, use tmux to access tmux environment. Here is a script to automate the process of opening multiple windows by running a bash script: . #!/bin/bash tmux new-session ; send-keys &#39;ngrok --all&#39; C-m ; split-window -v ; send-keys &#39;conda activate ENV; jupyter notebook --no-browser --port=PORT&#39; C-m ; split-window -v ; send-keys &#39;conda activate ENV; python -m visdom.server&#39; C-m ; split-window -v ; send-keys &#39;conda activate ENV; tensorboard --logdir=./outputs/logs&#39; C-m ; split-window -v ; send-keys &#39;gitkraken&#39; C-m ; # source: https://stackoverflow.com/a/40009032/5862635 . For this case, I create 4 windows: . Start ngrok. | Activate my project’s ENV then start jupyter notebook server on PORT. | Activate my project’s ENV then start visdom server. | Activate my project’s ENV then start tensorboard server. | Unit Testing (PyTest) . [TODO] .",
            "url": "https://sudomaze.dev/research/devops/machine%20learning/2021/08/29/til-effective-researcher.html",
            "relUrl": "/research/devops/machine%20learning/2021/08/29/til-effective-researcher.html",
            "date": " • Aug 29, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Code for Effective Pandas by Matt Harrison talk",
            "content": "%matplotlib inline from IPython.display import display import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns pd.options.display.min_rows = 20 # show more rows print(plt.style.available) # show avaiable themes plt.style.use(&#39;seaborn-dark-palette&#39;) # select a theme # https://seaborn.pydata.org/generated/seaborn.set_context.html sns.set_context(&#39;paper&#39;) # talk, paper, notebook, poster plt.plot(range(10)) # to view for myself plt.show() . [&#39;Solarize_Light2&#39;, &#39;_classic_test_patch&#39;, &#39;bmh&#39;, &#39;classic&#39;, &#39;dark_background&#39;, &#39;fast&#39;, &#39;fivethirtyeight&#39;, &#39;ggplot&#39;, &#39;grayscale&#39;, &#39;seaborn&#39;, &#39;seaborn-bright&#39;, &#39;seaborn-colorblind&#39;, &#39;seaborn-dark&#39;, &#39;seaborn-dark-palette&#39;, &#39;seaborn-darkgrid&#39;, &#39;seaborn-deep&#39;, &#39;seaborn-muted&#39;, &#39;seaborn-notebook&#39;, &#39;seaborn-paper&#39;, &#39;seaborn-pastel&#39;, &#39;seaborn-poster&#39;, &#39;seaborn-talk&#39;, &#39;seaborn-ticks&#39;, &#39;seaborn-white&#39;, &#39;seaborn-whitegrid&#39;, &#39;tableau-colorblind10&#39;] . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2021-08-22T01:06:18.302375 image/svg+xml Matplotlib v3.3.4, https://matplotlib.org/ data_source = &quot;https://github.com/mattharrison/datasets/raw/master/data/vehicles.csv.zip&quot; autos = pd.read_csv(data_source) . /home/alotaima/miniconda3/lib/python3.9/site-packages/IPython/core/interactiveshell.py:3437: DtypeWarning: Columns (68,70,71,72,73,74,76,79) have mixed types.Specify dtype option on import or set low_memory=False. exec(code_obj, self.user_global_ns, self.user_ns) . cols = [&#39;city08&#39;,&#39;comb08&#39;, &#39;cylinders&#39;, &#39;displ&#39;, &#39;drive&#39;, &#39;eng_dscr&#39;, &#39;trany&#39;, &#39;fuelCost08&#39;, &#39;highway08&#39;,&#39;make&#39;,&#39;range&#39;,&#39;year&#39;,&#39;createdOn&#39;] . print(&quot;show dtypes&quot;) print(autos[cols].dtypes) # int64 == means no missing data # float64 == means 1. all float numbers with no missing data 2. all float numbers with missing data 3. or all int numbers with missing data # object == means can&#39;t tell if it is int or not (not super fast as it points to python objects) display((autos [cols] .select_dtypes(int) .describe() )) old_mem = autos[cols].memory_usage(deep=True).sum() print(f&quot;{(old_mem)/1000000:.2f}MB&quot;) . show dtypes city08 int64 comb08 int64 cylinders float64 displ float64 drive object eng_dscr object trany object fuelCost08 int64 highway08 int64 make object range int64 year int64 createdOn object dtype: object . city08 comb08 fuelCost08 highway08 range year . count 41144.000000 | 41144.000000 | 41144.000000 | 41144.000000 | 41144.000000 | 41144.000000 | . mean 18.369045 | 20.616396 | 2362.335942 | 24.504667 | 0.793506 | 2001.535266 | . std 7.905886 | 7.674535 | 654.981925 | 7.730364 | 13.041592 | 11.142414 | . min 6.000000 | 7.000000 | 500.000000 | 9.000000 | 0.000000 | 1984.000000 | . 25% 15.000000 | 17.000000 | 1900.000000 | 20.000000 | 0.000000 | 1991.000000 | . 50% 17.000000 | 20.000000 | 2350.000000 | 24.000000 | 0.000000 | 2002.000000 | . 75% 20.000000 | 23.000000 | 2700.000000 | 28.000000 | 0.000000 | 2011.000000 | . max 150.000000 | 136.000000 | 7400.000000 | 124.000000 | 370.000000 | 2020.000000 | . 16.83MB . Casting as Integer . print(&quot;show int8 and int16 range&quot;) print(np.iinfo(np.int8)) print(np.iinfo(np.int16)) print(&quot;cast highway08, city08, and comb08 as int&quot;) display(( autos [cols] .astype({&#39;highway08&#39;: &#39;int8&#39;, &#39;city08&#39;: &#39;int16&#39;, &#39;comb08&#39;: &#39;int16&#39;}) # .select_dtypes([int, &#39;int8&#39;]) .select_dtypes([&#39;integer&#39;]) # select integer like .describe() )) new_mem = (autos [cols] .astype({&#39;highway08&#39;: &#39;int8&#39;, &#39;city08&#39;: &#39;int16&#39;, &#39;comb08&#39;: &#39;int16&#39;}) .memory_usage(deep=True) .sum() ) print(f&quot;{100 - new_mem/old_mem * 100:.2f}% ({(old_mem-new_mem)/1000000:.2f}MB)&quot;) . show int8 and int16 range Machine parameters for int8 min = -128 max = 127 Machine parameters for int16 min = -32768 max = 32767 cast highway08, city08, and comb08 as int . city08 comb08 fuelCost08 highway08 range year . count 41144.000000 | 41144.000000 | 41144.000000 | 41144.000000 | 41144.000000 | 41144.000000 | . mean 18.369045 | 20.616396 | 2362.335942 | 24.504667 | 0.793506 | 2001.535266 | . std 7.905886 | 7.674535 | 654.981925 | 7.730364 | 13.041592 | 11.142414 | . min 6.000000 | 7.000000 | 500.000000 | 9.000000 | 0.000000 | 1984.000000 | . 25% 15.000000 | 17.000000 | 1900.000000 | 20.000000 | 0.000000 | 1991.000000 | . 50% 17.000000 | 20.000000 | 2350.000000 | 24.000000 | 0.000000 | 2002.000000 | . 75% 20.000000 | 23.000000 | 2700.000000 | 28.000000 | 0.000000 | 2011.000000 | . max 150.000000 | 136.000000 | 7400.000000 | 124.000000 | 370.000000 | 2020.000000 | . 4.64% (0.78MB) . Remove NaN . print(&quot;show columns with dtype as float&quot;) display(( autos [cols] .select_dtypes(&#39;float&#39;) )) print(&quot;show cylinders&#39; summary&quot;) print(autos.cylinders.describe()) # it has missing values (41144 != 40938) print(&quot;show cylinders&#39; values (including NaN)&quot;) print(autos.cylinders.value_counts(dropna=False)) # show NaN # where are they missing? print(&quot;show rows with NaN values for cylinders&quot;) display(( autos [cols] .query(&#39;cylinders.isna()&#39;,engine=&#39;python&#39;) )) print(&quot;remove NaN values in cylinders &amp; displ and cast cylinders as int&quot;) # add cylinders and displ columns display(( autos [cols] .assign(cylinders=autos.cylinders.fillna(0).astype(&#39;int8&#39;), # updating columns with new values, cylinderes is filled with 0 when NaN and then converted to int8 displ=autos.displ.fillna(0)) # displ is filled with 0 when NaN .astype({ &#39;highway08&#39;: &#39;int8&#39;, &#39;city08&#39;: &#39;int16&#39;, &#39;comb08&#39;: &#39;int16&#39;, &#39;fuelCost08&#39;: &#39;int16&#39;, &#39;range&#39;: &#39;int16&#39;, &#39;year&#39;: &#39;int16&#39;,}) .describe() )) new_mem = ( autos [cols] .assign(cylinders=autos.cylinders.fillna(0).astype(&#39;int8&#39;), # updating columns with new values, cylinderes is filled with 0 when NaN and then converted to int8 displ=autos.displ.fillna(0)) # displ is filled with 0 when NaN .astype({ &#39;highway08&#39;: &#39;int8&#39;, &#39;city08&#39;: &#39;int16&#39;, &#39;comb08&#39;: &#39;int16&#39;, &#39;fuelCost08&#39;: &#39;int16&#39;, &#39;range&#39;: &#39;int16&#39;, &#39;year&#39;: &#39;int16&#39;,}) .memory_usage(deep=True) .sum() ) print(f&quot;{100 - new_mem/old_mem * 100:.2f}% ({(old_mem-new_mem)/1000000:.2f}MB)&quot;) . show columns with dtype as float . cylinders displ . 0 4.0 | 2.0 | . 1 12.0 | 4.9 | . 2 4.0 | 2.2 | . 3 8.0 | 5.2 | . 4 4.0 | 2.2 | . 5 4.0 | 1.8 | . 6 4.0 | 1.8 | . 7 4.0 | 1.6 | . 8 4.0 | 1.6 | . 9 4.0 | 1.8 | . ... ... | ... | . 41134 4.0 | 2.1 | . 41135 4.0 | 1.9 | . 41136 4.0 | 1.9 | . 41137 4.0 | 1.9 | . 41138 4.0 | 1.9 | . 41139 4.0 | 2.2 | . 41140 4.0 | 2.2 | . 41141 4.0 | 2.2 | . 41142 4.0 | 2.2 | . 41143 4.0 | 2.2 | . 41144 rows × 2 columns . show cylinders&#39; summary count 40938.000000 mean 5.717084 std 1.755517 min 2.000000 25% 4.000000 50% 6.000000 75% 6.000000 max 16.000000 Name: cylinders, dtype: float64 show cylinders&#39; values (including NaN) 4.0 15938 6.0 14284 8.0 8801 5.0 771 12.0 626 3.0 279 NaN 206 10.0 170 2.0 59 16.0 10 Name: cylinders, dtype: int64 show rows with NaN values for cylinders . city08 comb08 cylinders displ drive eng_dscr trany fuelCost08 highway08 make range year createdOn . 7138 81 | 85 | NaN | NaN | NaN | NaN | NaN | 800 | 91 | Nissan | 90 | 2000 | Tue Jan 01 00:00:00 EST 2013 | . 7139 81 | 72 | NaN | NaN | 2-Wheel Drive | NaN | NaN | 900 | 64 | Toyota | 88 | 2000 | Tue Jan 01 00:00:00 EST 2013 | . 8143 81 | 72 | NaN | NaN | 2-Wheel Drive | NaN | NaN | 900 | 64 | Toyota | 88 | 2001 | Tue Jan 01 00:00:00 EST 2013 | . 8144 74 | 65 | NaN | NaN | NaN | NaN | NaN | 1000 | 58 | Ford | 29 | 2001 | Tue Jan 01 00:00:00 EST 2013 | . 8146 45 | 39 | NaN | NaN | 2-Wheel Drive | NaN | NaN | 1700 | 33 | Ford | 38 | 2001 | Tue Jan 01 00:00:00 EST 2013 | . 8147 84 | 75 | NaN | NaN | NaN | NaN | NaN | 900 | 66 | Nissan | 33 | 2001 | Tue Jan 01 00:00:00 EST 2013 | . 9212 87 | 78 | NaN | NaN | 2-Wheel Drive | NaN | NaN | 850 | 69 | Toyota | 95 | 2002 | Tue Jan 01 00:00:00 EST 2013 | . 9213 45 | 39 | NaN | NaN | 2-Wheel Drive | NaN | NaN | 1700 | 33 | Ford | 38 | 2002 | Tue Jan 01 00:00:00 EST 2013 | . 10329 87 | 78 | NaN | NaN | 2-Wheel Drive | NaN | NaN | 850 | 69 | Toyota | 95 | 2003 | Tue Jan 01 00:00:00 EST 2013 | . 21413 22 | 24 | NaN | NaN | 4-Wheel Drive | NaN | Manual 5-spd | 1750 | 28 | Subaru | 0 | 1985 | Tue Jan 01 00:00:00 EST 2013 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 34407 73 | 72 | NaN | NaN | Front-Wheel Drive | NaN | Automatic (A1) | 900 | 71 | BYD | 187 | 2019 | Wed Mar 13 00:00:00 EDT 2019 | . 34408 118 | 108 | NaN | NaN | Front-Wheel Drive | NaN | Automatic (A1) | 600 | 97 | Nissan | 226 | 2019 | Wed Mar 13 00:00:00 EDT 2019 | . 34409 114 | 104 | NaN | NaN | Front-Wheel Drive | NaN | Automatic (A1) | 650 | 94 | Nissan | 215 | 2019 | Wed Mar 13 00:00:00 EDT 2019 | . 34538 74 | 74 | NaN | NaN | All-Wheel Drive | NaN | Automatic (A1) | 900 | 73 | Audi | 204 | 2019 | Tue Apr 16 00:00:00 EDT 2019 | . 34561 80 | 76 | NaN | NaN | 4-Wheel Drive | NaN | Automatic (A1) | 850 | 72 | Jaguar | 234 | 2020 | Thu May 02 00:00:00 EDT 2019 | . 34563 138 | 131 | NaN | NaN | Rear-Wheel Drive | NaN | Automatic (A1) | 500 | 124 | Tesla | 220 | 2019 | Thu May 02 00:00:00 EDT 2019 | . 34564 140 | 133 | NaN | NaN | Rear-Wheel Drive | NaN | Automatic (A1) | 500 | 124 | Tesla | 240 | 2019 | Thu May 02 00:00:00 EDT 2019 | . 34565 115 | 111 | NaN | NaN | All-Wheel Drive | NaN | Automatic (A1) | 600 | 107 | Tesla | 370 | 2019 | Thu May 02 00:00:00 EDT 2019 | . 34566 104 | 104 | NaN | NaN | All-Wheel Drive | NaN | Automatic (A1) | 650 | 104 | Tesla | 345 | 2019 | Thu May 02 00:00:00 EDT 2019 | . 34567 98 | 97 | NaN | NaN | All-Wheel Drive | NaN | Automatic (A1) | 700 | 96 | Tesla | 325 | 2019 | Thu May 02 00:00:00 EDT 2019 | . 206 rows × 13 columns . remove NaN values in cylinders &amp; displ and cast cylinders as int . city08 comb08 cylinders displ fuelCost08 highway08 range year . count 41144.000000 | 41144.000000 | 41144.000000 | 41144.000000 | 41144.000000 | 41144.000000 | 41144.000000 | 41144.000000 | . mean 18.369045 | 20.616396 | 5.688460 | 3.277904 | 2362.335942 | 24.504667 | 0.793506 | 2001.535266 | . std 7.905886 | 7.674535 | 1.797009 | 1.373415 | 654.981925 | 7.730364 | 13.041592 | 11.142414 | . min 6.000000 | 7.000000 | 0.000000 | 0.000000 | 500.000000 | 9.000000 | 0.000000 | 1984.000000 | . 25% 15.000000 | 17.000000 | 4.000000 | 2.200000 | 1900.000000 | 20.000000 | 0.000000 | 1991.000000 | . 50% 17.000000 | 20.000000 | 6.000000 | 3.000000 | 2350.000000 | 24.000000 | 0.000000 | 2002.000000 | . 75% 20.000000 | 23.000000 | 6.000000 | 4.300000 | 2700.000000 | 28.000000 | 0.000000 | 2011.000000 | . max 150.000000 | 136.000000 | 16.000000 | 8.400000 | 7400.000000 | 124.000000 | 370.000000 | 2020.000000 | . 10.75% (1.81MB) . Casting as Float . print(&quot;show float16 range&quot;) print(np.finfo(np.float16)) print(&quot;cast displ as float&quot;) display(( autos[cols] .assign(cylinders=autos.cylinders.fillna(0).astype(&#39;int8&#39;), displ=autos.displ.fillna(0).astype(&#39;float16&#39;)) .astype({ &#39;highway08&#39;: &#39;int8&#39;, &#39;city08&#39;: &#39;int16&#39;, &#39;comb08&#39;: &#39;int16&#39;, &#39;fuelCost08&#39;: &#39;int16&#39;, &#39;range&#39;: &#39;int16&#39;, &#39;year&#39;: &#39;int16&#39;,}) )) new_mem = ( autos[cols] .assign(cylinders=autos.cylinders.fillna(0).astype(&#39;int8&#39;), displ=autos.displ.fillna(0).astype(&#39;float16&#39;)) .astype({ &#39;highway08&#39;: &#39;int8&#39;, &#39;city08&#39;: &#39;int16&#39;, &#39;comb08&#39;: &#39;int16&#39;, &#39;fuelCost08&#39;: &#39;int16&#39;, &#39;range&#39;: &#39;int16&#39;, &#39;year&#39;: &#39;int16&#39;,}) .memory_usage(deep=True) .sum() ) print(f&quot;{100 - new_mem/old_mem * 100:.2f}% ({(old_mem-new_mem)/1000000:.2f}MB)&quot;) . show float16 range Machine parameters for float16 precision = 3 resolution = 1.00040e-03 machep = -10 eps = 9.76562e-04 negep = -11 epsneg = 4.88281e-04 minexp = -14 tiny = 6.10352e-05 maxexp = 16 max = 6.55040e+04 nexp = 5 min = -max cast displ as float . city08 comb08 cylinders displ drive eng_dscr trany fuelCost08 highway08 make range year createdOn . 0 19 | 21 | 4 | 2.000000 | Rear-Wheel Drive | (FFS) | Manual 5-spd | 2000 | 25 | Alfa Romeo | 0 | 1985 | Tue Jan 01 00:00:00 EST 2013 | . 1 9 | 11 | 12 | 4.898438 | Rear-Wheel Drive | (GUZZLER) | Manual 5-spd | 3850 | 14 | Ferrari | 0 | 1985 | Tue Jan 01 00:00:00 EST 2013 | . 2 23 | 27 | 4 | 2.199219 | Front-Wheel Drive | (FFS) | Manual 5-spd | 1550 | 33 | Dodge | 0 | 1985 | Tue Jan 01 00:00:00 EST 2013 | . 3 10 | 11 | 8 | 5.199219 | Rear-Wheel Drive | NaN | Automatic 3-spd | 3850 | 12 | Dodge | 0 | 1985 | Tue Jan 01 00:00:00 EST 2013 | . 4 17 | 19 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | (FFS,TRBO) | Manual 5-spd | 2700 | 23 | Subaru | 0 | 1993 | Tue Jan 01 00:00:00 EST 2013 | . 5 21 | 22 | 4 | 1.799805 | Front-Wheel Drive | (FFS) | Automatic 3-spd | 1900 | 24 | Subaru | 0 | 1993 | Tue Jan 01 00:00:00 EST 2013 | . 6 22 | 25 | 4 | 1.799805 | Front-Wheel Drive | (FFS) | Manual 5-spd | 1700 | 29 | Subaru | 0 | 1993 | Tue Jan 01 00:00:00 EST 2013 | . 7 23 | 24 | 4 | 1.599609 | Front-Wheel Drive | (FFS) | Automatic 3-spd | 1750 | 26 | Toyota | 0 | 1993 | Tue Jan 01 00:00:00 EST 2013 | . 8 23 | 26 | 4 | 1.599609 | Front-Wheel Drive | (FFS) | Manual 5-spd | 1600 | 31 | Toyota | 0 | 1993 | Tue Jan 01 00:00:00 EST 2013 | . 9 23 | 25 | 4 | 1.799805 | Front-Wheel Drive | (FFS) | Automatic 4-spd | 1700 | 30 | Toyota | 0 | 1993 | Tue Jan 01 00:00:00 EST 2013 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 41134 18 | 20 | 4 | 2.099609 | Front-Wheel Drive | (FFS) | Manual 5-spd | 2100 | 24 | Saab | 0 | 1993 | Tue Jan 01 00:00:00 EST 2013 | . 41135 23 | 26 | 4 | 1.900391 | Front-Wheel Drive | (TBI) (FFS) | Automatic 4-spd | 1600 | 33 | Saturn | 0 | 1993 | Tue Jan 01 00:00:00 EST 2013 | . 41136 21 | 24 | 4 | 1.900391 | Front-Wheel Drive | (MFI) (FFS) | Automatic 4-spd | 1750 | 30 | Saturn | 0 | 1993 | Tue Jan 01 00:00:00 EST 2013 | . 41137 24 | 28 | 4 | 1.900391 | Front-Wheel Drive | (TBI) (FFS) | Manual 5-spd | 1500 | 33 | Saturn | 0 | 1993 | Tue Jan 01 00:00:00 EST 2013 | . 41138 21 | 25 | 4 | 1.900391 | Front-Wheel Drive | (MFI) (FFS) | Manual 5-spd | 1700 | 32 | Saturn | 0 | 1993 | Tue Jan 01 00:00:00 EST 2013 | . 41139 19 | 22 | 4 | 2.199219 | Front-Wheel Drive | (FFS) | Automatic 4-spd | 1900 | 26 | Subaru | 0 | 1993 | Tue Jan 01 00:00:00 EST 2013 | . 41140 20 | 23 | 4 | 2.199219 | Front-Wheel Drive | (FFS) | Manual 5-spd | 1850 | 28 | Subaru | 0 | 1993 | Tue Jan 01 00:00:00 EST 2013 | . 41141 18 | 21 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | (FFS) | Automatic 4-spd | 2000 | 24 | Subaru | 0 | 1993 | Tue Jan 01 00:00:00 EST 2013 | . 41142 18 | 21 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | (FFS) | Manual 5-spd | 2000 | 24 | Subaru | 0 | 1993 | Tue Jan 01 00:00:00 EST 2013 | . 41143 16 | 18 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | (FFS,TRBO) | Automatic 4-spd | 2900 | 21 | Subaru | 0 | 1993 | Tue Jan 01 00:00:00 EST 2013 | . 41144 rows × 13 columns . 12.22% (2.06MB) . Casting Objects as Category . print(&quot;show columns with dtype as object&quot;) ( autos[cols] .select_dtypes(object) # object that could be turned to categorical ) # show drive&#39;s values print(&quot;show drive&#39;s values (including NaN)&quot;) ( autos .drive.value_counts(dropna=False) ) # show NaN print(&quot;show rows with NaN values for drive&quot;) ( autos[cols] .query(&#39;drive.isna()&#39;,engine=&#39;python&#39;) ) # show unique values based on year print(&quot;show show unique values based on year&quot;) ( autos[cols] .groupby(&#39;year&#39;) .drive .nunique() ) # # drive and make (in .astype) to category # # converting two columns to categorical column print(&quot;remove NaN values in drive and cast drive as category&quot;) display(( autos[cols] .assign(cylinders=autos.cylinders.fillna(0).astype(&#39;int8&#39;), displ=autos.displ.fillna(0).astype(&#39;float16&#39;), drive=autos.drive.fillna(&#39;Other&#39;).astype(&#39;category&#39;)) .astype({ &#39;highway08&#39;: &#39;int8&#39;, &#39;city08&#39;: &#39;int16&#39;, &#39;comb08&#39;: &#39;int16&#39;, &#39;fuelCost08&#39;: &#39;int16&#39;, &#39;range&#39;: &#39;int16&#39;, &#39;year&#39;: &#39;int16&#39;, &#39;make&#39;: &#39;category&#39;}) .describe() )) new_mem = ( autos[cols] .assign(cylinders=autos.cylinders.fillna(0).astype(&#39;int8&#39;), displ=autos.displ.fillna(0).astype(&#39;float16&#39;), drive=autos.drive.fillna(&#39;Other&#39;).astype(&#39;category&#39;)) .astype({ &#39;highway08&#39;: &#39;int8&#39;, &#39;city08&#39;: &#39;int16&#39;, &#39;comb08&#39;: &#39;int16&#39;, &#39;fuelCost08&#39;: &#39;int16&#39;, &#39;range&#39;: &#39;int16&#39;, &#39;year&#39;: &#39;int16&#39;, &#39;make&#39;: &#39;category&#39;}) .memory_usage(deep=True) .sum() ) print(f&quot;{100 - new_mem/old_mem * 100:.2f}% ({(old_mem-new_mem)/1000000:.2f}MB)&quot;) . show columns with dtype as object show drive&#39;s values (including NaN) show rows with NaN values for drive show show unique values based on year remove NaN values in drive and cast drive as category . city08 comb08 cylinders displ fuelCost08 highway08 range year . count 41144.000000 | 41144.000000 | 41144.000000 | 4.114400e+04 | 41144.000000 | 41144.000000 | 41144.000000 | 41144.000000 | . mean 18.369045 | 20.616396 | 5.688460 | inf | 2362.335942 | 24.504667 | 0.793506 | 2001.535266 | . std 7.905886 | 7.674535 | 1.797009 | 1.373047e+00 | 654.981925 | 7.730364 | 13.041592 | 11.142414 | . min 6.000000 | 7.000000 | 0.000000 | 0.000000e+00 | 500.000000 | 9.000000 | 0.000000 | 1984.000000 | . 25% 15.000000 | 17.000000 | 4.000000 | 2.199219e+00 | 1900.000000 | 20.000000 | 0.000000 | 1991.000000 | . 50% 17.000000 | 20.000000 | 6.000000 | 3.000000e+00 | 2350.000000 | 24.000000 | 0.000000 | 2002.000000 | . 75% 20.000000 | 23.000000 | 6.000000 | 4.300781e+00 | 2700.000000 | 28.000000 | 0.000000 | 2011.000000 | . max 150.000000 | 136.000000 | 16.000000 | 8.398438e+00 | 7400.000000 | 124.000000 | 370.000000 | 2020.000000 | . 44.87% (7.55MB) . Casting as Category . print(&quot;show trany&#39;s values (including NaN)&quot;) display(( autos .trany.value_counts(dropna=False) )) # drive and make (in .astype) to category # converting two columns to categorical column print(&quot;create two new columns: automatic and speeds&quot;) print(&quot;authomatic: values that contain &#39;Auto&#39; from trany column&quot;) print(&quot;speeds: decimal values from trany column and fill NaN then cast as int&quot;) display(( autos[cols] .assign(cylinders=autos.cylinders.fillna(0).astype(&#39;int8&#39;), displ=autos.displ.fillna(0).astype(&#39;float16&#39;), drive=autos.drive.fillna(&#39;Other&#39;).astype(&#39;category&#39;), automatic=autos.trany.str.contains(&#39;Auto&#39;), speeds=autos.trany.str.extract(r&#39;( d)+&#39;).fillna(&#39;20&#39;).astype(&#39;int8&#39;) # pull the digits from trany column ) .astype({ &#39;highway08&#39;: &#39;int8&#39;, &#39;city08&#39;: &#39;int16&#39;, &#39;comb08&#39;: &#39;int16&#39;, &#39;fuelCost08&#39;: &#39;int16&#39;, &#39;range&#39;: &#39;int16&#39;, &#39;year&#39;: &#39;int16&#39;, &#39;make&#39;: &#39;category&#39;}) .drop(columns=[&#39;trany&#39;]) .describe() )) new_mem = ( autos[cols] .assign(cylinders=autos.cylinders.fillna(0).astype(&#39;int8&#39;), displ=autos.displ.fillna(0).astype(&#39;float16&#39;), drive=autos.drive.fillna(&#39;Other&#39;).astype(&#39;category&#39;), automatic=autos.trany.str.contains(&#39;Auto&#39;), speeds=autos.trany.str.extract(r&#39;( d)+&#39;).fillna(&#39;20&#39;).astype(&#39;int8&#39;) # pull the digits from trany column ) .astype({ &#39;highway08&#39;: &#39;int8&#39;, &#39;city08&#39;: &#39;int16&#39;, &#39;comb08&#39;: &#39;int16&#39;, &#39;fuelCost08&#39;: &#39;int16&#39;, &#39;range&#39;: &#39;int16&#39;, &#39;year&#39;: &#39;int16&#39;, &#39;make&#39;: &#39;category&#39;}) .drop(columns=[&#39;trany&#39;]) .memory_usage(deep=True) .sum() ) print(f&quot;{100 - new_mem/old_mem * 100:.2f}% ({(old_mem-new_mem)/1000000:.2f}MB)&quot;) . show trany&#39;s values (including NaN) . Automatic 4-spd 11047 Manual 5-spd 8361 Automatic 3-spd 3151 Automatic (S6) 3106 Manual 6-spd 2757 Automatic 5-spd 2203 Automatic (S8) 1665 Automatic 6-spd 1619 Manual 4-spd 1483 Automatic (S5) 833 Automatic (variable gear ratios) 826 Automatic 7-spd 724 Automatic 8-spd 433 Automatic (AM-S7) 424 Automatic (S7) 327 Automatic 9-spd 293 Automatic (AM7) 245 Automatic (S4) 233 Automatic (AV-S6) 208 Automatic (A1) 201 Automatic (AM6) 151 Automatic (AV-S7) 139 Automatic (S10) 124 Automatic (AM-S6) 116 Manual 7-spd 114 Automatic (S9) 86 Manual 3-spd 77 Automatic (AM-S8) 60 Automatic (AV-S8) 47 Automatic 10-spd 25 Manual 4-spd Doubled 17 Automatic (AM5) 14 NaN 11 Automatic (AV-S10) 11 Automatic (AM8) 6 Automatic (AM-S9) 3 Automatic (L3) 2 Automatic (L4) 2 Name: trany, dtype: int64 . create two new columns: automatic and speeds authomatic: values that contain &#39;Auto&#39; from trany column speeds: decimal values from trany column and fill NaN then cast as int . city08 comb08 cylinders displ fuelCost08 highway08 range year speeds . count 41144.000000 | 41144.000000 | 41144.000000 | 4.114400e+04 | 41144.000000 | 41144.000000 | 41144.000000 | 41144.000000 | 41144.000000 | . mean 18.369045 | 20.616396 | 5.688460 | inf | 2362.335942 | 24.504667 | 0.793506 | 2001.535266 | 5.286141 | . std 7.905886 | 7.674535 | 1.797009 | 1.373047e+00 | 654.981925 | 7.730364 | 13.041592 | 11.142414 | 2.512561 | . min 6.000000 | 7.000000 | 0.000000 | 0.000000e+00 | 500.000000 | 9.000000 | 0.000000 | 1984.000000 | 0.000000 | . 25% 15.000000 | 17.000000 | 4.000000 | 2.199219e+00 | 1900.000000 | 20.000000 | 0.000000 | 1991.000000 | 4.000000 | . 50% 17.000000 | 20.000000 | 6.000000 | 3.000000e+00 | 2350.000000 | 24.000000 | 0.000000 | 2002.000000 | 5.000000 | . 75% 20.000000 | 23.000000 | 6.000000 | 4.300781e+00 | 2700.000000 | 28.000000 | 0.000000 | 2011.000000 | 6.000000 | . max 150.000000 | 136.000000 | 16.000000 | 8.398438e+00 | 7400.000000 | 124.000000 | 370.000000 | 2020.000000 | 20.000000 | . 53.56% (9.02MB) . Casting as Date . # add createdOn (Python doesn&#39;t like EST/EDT format) print(&quot;cast createdOn as Date, but Python doesn&#39;t like EST/EDT format&quot;) display(( autos[cols] .assign(cylinders=autos.cylinders.fillna(0).astype(&#39;int8&#39;), displ=autos.displ.fillna(0).astype(&#39;float16&#39;), drive=autos.drive.fillna(&#39;Other&#39;).astype(&#39;category&#39;), automatic=autos.trany.str.contains(&#39;Auto&#39;), speeds=autos.trany.str.extract(r&#39;( d)+&#39;).fillna(&#39;20&#39;).astype(&#39;int8&#39;), # pull the digits from trany column createdOn=pd.to_datetime(autos.createdOn).dt.tz_localize(&#39;America/New_York&#39;).dt.tz_convert(&#39;UTC&#39;) ) .astype({ &#39;highway08&#39;: &#39;int8&#39;, &#39;city08&#39;: &#39;int16&#39;, &#39;comb08&#39;: &#39;int16&#39;, &#39;fuelCost08&#39;: &#39;int16&#39;, &#39;range&#39;: &#39;int16&#39;, &#39;year&#39;: &#39;int16&#39;, &#39;make&#39;: &#39;category&#39;}) .drop(columns=[&#39;trany&#39;]) .describe() )) # fix date warning print(&quot;cast createdOn as Date with the right fix&quot;) display(( autos[cols] .assign(cylinders=autos.cylinders.fillna(0).astype(&#39;int8&#39;), displ=autos.displ.fillna(0).astype(&#39;float16&#39;), drive=autos.drive.fillna(&#39;Other&#39;).astype(&#39;category&#39;), automatic=autos.trany.str.contains(&#39;Auto&#39;), speeds=autos.trany.str.extract(r&#39;( d)+&#39;).fillna(&#39;20&#39;).astype(&#39;int8&#39;), # pull the digits from trany column createdOn=pd.to_datetime(autos.createdOn.replace({&#39; EDT&#39;: &#39;-04:00&#39;, &#39; EST&#39;: &#39;-05:00&#39;}, regex=True)) ) .astype({ &#39;highway08&#39;: &#39;int8&#39;, &#39;city08&#39;: &#39;int16&#39;, &#39;comb08&#39;: &#39;int16&#39;, &#39;fuelCost08&#39;: &#39;int16&#39;, &#39;range&#39;: &#39;int16&#39;, &#39;year&#39;: &#39;int16&#39;, &#39;make&#39;: &#39;category&#39;}) .drop(columns=[&#39;trany&#39;]) .describe() )) new_mem = ( autos[cols] .assign(cylinders=autos.cylinders.fillna(0).astype(&#39;int8&#39;), displ=autos.displ.fillna(0).astype(&#39;float16&#39;), drive=autos.drive.fillna(&#39;Other&#39;).astype(&#39;category&#39;), automatic=autos.trany.str.contains(&#39;Auto&#39;), speeds=autos.trany.str.extract(r&#39;( d)+&#39;).fillna(&#39;20&#39;).astype(&#39;int8&#39;), # pull the digits from trany column createdOn=pd.to_datetime(autos.createdOn.replace({&#39; EDT&#39;: &#39;-04:00&#39;, &#39; EST&#39;: &#39;-05:00&#39;}, regex=True)) ) .astype({ &#39;highway08&#39;: &#39;int8&#39;, &#39;city08&#39;: &#39;int16&#39;, &#39;comb08&#39;: &#39;int16&#39;, &#39;fuelCost08&#39;: &#39;int16&#39;, &#39;range&#39;: &#39;int16&#39;, &#39;year&#39;: &#39;int16&#39;, &#39;make&#39;: &#39;category&#39;}) .drop(columns=[&#39;trany&#39;]) .memory_usage(deep=True) .sum() ) print(f&quot;{100 - new_mem/old_mem * 100:.2f}% ({(old_mem-new_mem)/1000000:.2f}MB)&quot;) . cast createdOn as Date, but Python doesn&#39;t like EST/EDT format . /home/alotaima/miniconda3/lib/python3.9/site-packages/dateutil/parser/_parser.py:1213: UnknownTimezoneWarning: tzname EST identified but not understood. Pass `tzinfos` argument in order to correctly return a timezone-aware datetime. In a future version, this will raise an exception. warnings.warn(&#34;tzname {tzname} identified but not understood. &#34; /home/alotaima/miniconda3/lib/python3.9/site-packages/dateutil/parser/_parser.py:1213: UnknownTimezoneWarning: tzname EDT identified but not understood. Pass `tzinfos` argument in order to correctly return a timezone-aware datetime. In a future version, this will raise an exception. warnings.warn(&#34;tzname {tzname} identified but not understood. &#34; . city08 comb08 cylinders displ fuelCost08 highway08 range year speeds . count 41144.000000 | 41144.000000 | 41144.000000 | 4.114400e+04 | 41144.000000 | 41144.000000 | 41144.000000 | 41144.000000 | 41144.000000 | . mean 18.369045 | 20.616396 | 5.688460 | inf | 2362.335942 | 24.504667 | 0.793506 | 2001.535266 | 5.286141 | . std 7.905886 | 7.674535 | 1.797009 | 1.373047e+00 | 654.981925 | 7.730364 | 13.041592 | 11.142414 | 2.512561 | . min 6.000000 | 7.000000 | 0.000000 | 0.000000e+00 | 500.000000 | 9.000000 | 0.000000 | 1984.000000 | 0.000000 | . 25% 15.000000 | 17.000000 | 4.000000 | 2.199219e+00 | 1900.000000 | 20.000000 | 0.000000 | 1991.000000 | 4.000000 | . 50% 17.000000 | 20.000000 | 6.000000 | 3.000000e+00 | 2350.000000 | 24.000000 | 0.000000 | 2002.000000 | 5.000000 | . 75% 20.000000 | 23.000000 | 6.000000 | 4.300781e+00 | 2700.000000 | 28.000000 | 0.000000 | 2011.000000 | 6.000000 | . max 150.000000 | 136.000000 | 16.000000 | 8.398438e+00 | 7400.000000 | 124.000000 | 370.000000 | 2020.000000 | 20.000000 | . cast createdOn as Date with the right fix . city08 comb08 cylinders displ fuelCost08 highway08 range year speeds . count 41144.000000 | 41144.000000 | 41144.000000 | 4.114400e+04 | 41144.000000 | 41144.000000 | 41144.000000 | 41144.000000 | 41144.000000 | . mean 18.369045 | 20.616396 | 5.688460 | inf | 2362.335942 | 24.504667 | 0.793506 | 2001.535266 | 5.286141 | . std 7.905886 | 7.674535 | 1.797009 | 1.373047e+00 | 654.981925 | 7.730364 | 13.041592 | 11.142414 | 2.512561 | . min 6.000000 | 7.000000 | 0.000000 | 0.000000e+00 | 500.000000 | 9.000000 | 0.000000 | 1984.000000 | 0.000000 | . 25% 15.000000 | 17.000000 | 4.000000 | 2.199219e+00 | 1900.000000 | 20.000000 | 0.000000 | 1991.000000 | 4.000000 | . 50% 17.000000 | 20.000000 | 6.000000 | 3.000000e+00 | 2350.000000 | 24.000000 | 0.000000 | 2002.000000 | 5.000000 | . 75% 20.000000 | 23.000000 | 6.000000 | 4.300781e+00 | 2700.000000 | 28.000000 | 0.000000 | 2011.000000 | 6.000000 | . max 150.000000 | 136.000000 | 16.000000 | 8.398438e+00 | 7400.000000 | 124.000000 | 370.000000 | 2020.000000 | 20.000000 | . 60.65% (10.21MB) . Casting as Category for columns with multiple values . print(&quot;show eng_dscr&#39;s values (including NaN)&quot;) display(( autos[cols] .assign(cylinders=autos.cylinders.fillna(0).astype(&#39;int8&#39;), displ=autos.displ.fillna(0).astype(&#39;float16&#39;), drive=autos.drive.fillna(&#39;Other&#39;).astype(&#39;category&#39;), automatic=autos.trany.str.contains(&#39;Auto&#39;), speeds=autos.trany.str.extract(r&#39;( d)+&#39;).fillna(&#39;20&#39;).astype(&#39;int8&#39;), # pull the digits from trany column createdOn=pd.to_datetime(autos.createdOn.replace({&#39; EDT&#39;: &#39;-04:00&#39;, &#39; EST&#39;: &#39;-05:00&#39;}, regex=True)), ) .astype({ &#39;highway08&#39;: &#39;int8&#39;, &#39;city08&#39;: &#39;int16&#39;, &#39;comb08&#39;: &#39;int16&#39;, &#39;fuelCost08&#39;: &#39;int16&#39;, &#39;range&#39;: &#39;int16&#39;, &#39;year&#39;: &#39;int16&#39;, &#39;make&#39;: &#39;category&#39;}) .drop(columns=[&#39;trany&#39;]) .eng_dscr .value_counts(dropna=False) )) # add ffs (Feedback fuel system), drop eng_dscr print(&quot;create a new column: ffs&quot;) print(&quot;ffs: values that contain &#39;FFS&#39; from eng_dscr column&quot;) display(( autos[cols] .assign(cylinders=autos.cylinders.fillna(0).astype(&#39;int8&#39;), displ=autos.displ.fillna(0).astype(&#39;float16&#39;), drive=autos.drive.fillna(&#39;Other&#39;).astype(&#39;category&#39;), automatic=autos.trany.str.contains(&#39;Auto&#39;), speeds=autos.trany.str.extract(r&#39;( d)+&#39;).fillna(&#39;20&#39;).astype(&#39;int8&#39;), # pull the digits from trany column createdOn=pd.to_datetime(autos.createdOn.replace({&#39; EDT&#39;: &#39;-04:00&#39;, &#39; EST&#39;: &#39;-05:00&#39;}, regex=True)), ffs=autos.eng_dscr.str.contains(&#39;FFS&#39;), ) .astype({ &#39;highway08&#39;: &#39;int8&#39;, &#39;city08&#39;: &#39;int16&#39;, &#39;comb08&#39;: &#39;int16&#39;, &#39;fuelCost08&#39;: &#39;int16&#39;, &#39;range&#39;: &#39;int16&#39;, &#39;year&#39;: &#39;int16&#39;, &#39;make&#39;: &#39;category&#39;}) .drop(columns=[&#39;trany&#39;, &#39;eng_dscr&#39;]) .describe() )) new_mem = ( autos[cols] .assign(cylinders=autos.cylinders.fillna(0).astype(&#39;int8&#39;), displ=autos.displ.fillna(0).astype(&#39;float16&#39;), drive=autos.drive.fillna(&#39;Other&#39;).astype(&#39;category&#39;), automatic=autos.trany.str.contains(&#39;Auto&#39;), speeds=autos.trany.str.extract(r&#39;( d)+&#39;).fillna(&#39;20&#39;).astype(&#39;int8&#39;), # pull the digits from trany column createdOn=pd.to_datetime(autos.createdOn.replace({&#39; EDT&#39;: &#39;-04:00&#39;, &#39; EST&#39;: &#39;-05:00&#39;}, regex=True)), ffs=autos.eng_dscr.str.contains(&#39;FFS&#39;), ) .astype({ &#39;highway08&#39;: &#39;int8&#39;, &#39;city08&#39;: &#39;int16&#39;, &#39;comb08&#39;: &#39;int16&#39;, &#39;fuelCost08&#39;: &#39;int16&#39;, &#39;range&#39;: &#39;int16&#39;, &#39;year&#39;: &#39;int16&#39;, &#39;make&#39;: &#39;category&#39;}) .drop(columns=[&#39;trany&#39;, &#39;eng_dscr&#39;]) .memory_usage(deep=True) .sum() ) print(f&quot;{100 - new_mem/old_mem * 100:.2f}% ({(old_mem-new_mem)/1000000:.2f}MB)&quot;) . show eng_dscr&#39;s values (including NaN) . NaN 16153 (FFS) 8827 SIDI 5526 (FFS) CA model 926 (FFS) (MPFI) 734 FFV 701 (FFS,TRBO) 666 (350 V8) (FFS) 411 (GUZZLER) (FFS) 366 SOHC 354 ... B234L/R4 (FFS,TRBO) 1 GUZZLER V8 FFS,TURBO 1 4.6M FFS MPFI 1 CNG FFS 1 POLICE FFS MPFI 1 B308E5 FFS,TURBO 1 5.4E-R FFS MPFI 1 V-6 FFS 1 (GUZZLER) (FFS) (S-CHARGE) 1 R-ENG (FFS,TRBO) 1 Name: eng_dscr, Length: 558, dtype: int64 . create a new column: ffs ffs: values that contain &#39;FFS&#39; from eng_dscr column . city08 comb08 cylinders displ fuelCost08 highway08 range year speeds . count 41144.000000 | 41144.000000 | 41144.000000 | 4.114400e+04 | 41144.000000 | 41144.000000 | 41144.000000 | 41144.000000 | 41144.000000 | . mean 18.369045 | 20.616396 | 5.688460 | inf | 2362.335942 | 24.504667 | 0.793506 | 2001.535266 | 5.286141 | . std 7.905886 | 7.674535 | 1.797009 | 1.373047e+00 | 654.981925 | 7.730364 | 13.041592 | 11.142414 | 2.512561 | . min 6.000000 | 7.000000 | 0.000000 | 0.000000e+00 | 500.000000 | 9.000000 | 0.000000 | 1984.000000 | 0.000000 | . 25% 15.000000 | 17.000000 | 4.000000 | 2.199219e+00 | 1900.000000 | 20.000000 | 0.000000 | 1991.000000 | 4.000000 | . 50% 17.000000 | 20.000000 | 6.000000 | 3.000000e+00 | 2350.000000 | 24.000000 | 0.000000 | 2002.000000 | 5.000000 | . 75% 20.000000 | 23.000000 | 6.000000 | 4.300781e+00 | 2700.000000 | 28.000000 | 0.000000 | 2011.000000 | 6.000000 | . max 150.000000 | 136.000000 | 16.000000 | 8.398438e+00 | 7400.000000 | 124.000000 | 370.000000 | 2020.000000 | 20.000000 | . 65.17% (10.97MB) . Cleaning up everything . def tweak_autos(autos): cols = [&#39;city08&#39;,&#39;comb08&#39;, &#39;cylinders&#39;, &#39;displ&#39;, &#39;drive&#39;, &#39;eng_dscr&#39;, &#39;trany&#39;, &#39;fuelCost08&#39;, &#39;highway08&#39;,&#39;make&#39;,&#39;range&#39;,&#39;year&#39;,&#39;createdOn&#39;] return ( autos[cols] .assign(cylinders=autos.cylinders.fillna(0).astype(&#39;int8&#39;), displ=autos.displ.fillna(0).astype(&#39;float16&#39;), drive=autos.drive.fillna(&#39;Other&#39;).astype(&#39;category&#39;), automatic=autos.trany.str.contains(&#39;Auto&#39;), speeds=autos.trany.str.extract(r&#39;( d)+&#39;).fillna(&#39;20&#39;).astype(&#39;int8&#39;), # pull the digits from trany column createdOn=pd.to_datetime(autos.createdOn.replace({&#39; EDT&#39;: &#39;-04:00&#39;, &#39; EST&#39;: &#39;-05:00&#39;}, regex=True)), ffs=autos.eng_dscr.str.contains(&#39;FFS&#39;), ) .astype({ &#39;highway08&#39;: &#39;int8&#39;, &#39;city08&#39;: &#39;int16&#39;, &#39;comb08&#39;: &#39;int16&#39;, &#39;fuelCost08&#39;: &#39;int16&#39;, &#39;range&#39;: &#39;int16&#39;, &#39;year&#39;: &#39;int16&#39;, &#39;make&#39;: &#39;category&#39;}) .drop(columns=[&#39;trany&#39;, &#39;eng_dscr&#39;]) ) tweak_autos(autos) . city08 comb08 cylinders displ drive fuelCost08 highway08 make range year createdOn automatic speeds ffs . 0 19 | 21 | 4 | 2.000000 | Rear-Wheel Drive | 2000 | 25 | Alfa Romeo | 0 | 1985 | 2013-01-01 00:00:00-05:00 | False | 5 | True | . 1 9 | 11 | 12 | 4.898438 | Rear-Wheel Drive | 3850 | 14 | Ferrari | 0 | 1985 | 2013-01-01 00:00:00-05:00 | False | 5 | False | . 2 23 | 27 | 4 | 2.199219 | Front-Wheel Drive | 1550 | 33 | Dodge | 0 | 1985 | 2013-01-01 00:00:00-05:00 | False | 5 | True | . 3 10 | 11 | 8 | 5.199219 | Rear-Wheel Drive | 3850 | 12 | Dodge | 0 | 1985 | 2013-01-01 00:00:00-05:00 | True | 3 | NaN | . 4 17 | 19 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | 2700 | 23 | Subaru | 0 | 1993 | 2013-01-01 00:00:00-05:00 | False | 5 | True | . 5 21 | 22 | 4 | 1.799805 | Front-Wheel Drive | 1900 | 24 | Subaru | 0 | 1993 | 2013-01-01 00:00:00-05:00 | True | 3 | True | . 6 22 | 25 | 4 | 1.799805 | Front-Wheel Drive | 1700 | 29 | Subaru | 0 | 1993 | 2013-01-01 00:00:00-05:00 | False | 5 | True | . 7 23 | 24 | 4 | 1.599609 | Front-Wheel Drive | 1750 | 26 | Toyota | 0 | 1993 | 2013-01-01 00:00:00-05:00 | True | 3 | True | . 8 23 | 26 | 4 | 1.599609 | Front-Wheel Drive | 1600 | 31 | Toyota | 0 | 1993 | 2013-01-01 00:00:00-05:00 | False | 5 | True | . 9 23 | 25 | 4 | 1.799805 | Front-Wheel Drive | 1700 | 30 | Toyota | 0 | 1993 | 2013-01-01 00:00:00-05:00 | True | 4 | True | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 41134 18 | 20 | 4 | 2.099609 | Front-Wheel Drive | 2100 | 24 | Saab | 0 | 1993 | 2013-01-01 00:00:00-05:00 | False | 5 | True | . 41135 23 | 26 | 4 | 1.900391 | Front-Wheel Drive | 1600 | 33 | Saturn | 0 | 1993 | 2013-01-01 00:00:00-05:00 | True | 4 | True | . 41136 21 | 24 | 4 | 1.900391 | Front-Wheel Drive | 1750 | 30 | Saturn | 0 | 1993 | 2013-01-01 00:00:00-05:00 | True | 4 | True | . 41137 24 | 28 | 4 | 1.900391 | Front-Wheel Drive | 1500 | 33 | Saturn | 0 | 1993 | 2013-01-01 00:00:00-05:00 | False | 5 | True | . 41138 21 | 25 | 4 | 1.900391 | Front-Wheel Drive | 1700 | 32 | Saturn | 0 | 1993 | 2013-01-01 00:00:00-05:00 | False | 5 | True | . 41139 19 | 22 | 4 | 2.199219 | Front-Wheel Drive | 1900 | 26 | Subaru | 0 | 1993 | 2013-01-01 00:00:00-05:00 | True | 4 | True | . 41140 20 | 23 | 4 | 2.199219 | Front-Wheel Drive | 1850 | 28 | Subaru | 0 | 1993 | 2013-01-01 00:00:00-05:00 | False | 5 | True | . 41141 18 | 21 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | 2000 | 24 | Subaru | 0 | 1993 | 2013-01-01 00:00:00-05:00 | True | 4 | True | . 41142 18 | 21 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | 2000 | 24 | Subaru | 0 | 1993 | 2013-01-01 00:00:00-05:00 | False | 5 | True | . 41143 16 | 18 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | 2900 | 21 | Subaru | 0 | 1993 | 2013-01-01 00:00:00-05:00 | True | 4 | True | . 41144 rows × 14 columns . from IPython.display import display def get_var(df, var_name): globals()[var_name] = df.copy(deep=True) return df def tweak_autos(autos): cols = [&#39;city08&#39;,&#39;comb08&#39;, &#39;cylinders&#39;, &#39;displ&#39;, &#39;drive&#39;, &#39;eng_dscr&#39;, &#39;trany&#39;, &#39;fuelCost08&#39;, &#39;highway08&#39;,&#39;make&#39;,&#39;range&#39;,&#39;year&#39;,&#39;createdOn&#39;] return ( autos[cols] .pipe(get_var, &#39;old_df&#39;) # store an old copy of df .assign(cylinders=autos.cylinders.fillna(0).astype(&#39;int8&#39;), displ=autos.displ.fillna(0).astype(&#39;float16&#39;), drive=autos.drive.fillna(&#39;Other&#39;).astype(&#39;category&#39;), automatic=autos.trany.str.contains(&#39;Auto&#39;), speeds=autos.trany.str.extract(r&#39;( d)+&#39;).fillna(&#39;20&#39;).astype(&#39;int8&#39;), # pull the digits from trany column createdOn=pd.to_datetime(autos.createdOn.replace({&#39; EDT&#39;: &#39;-04:00&#39;, &#39; EST&#39;: &#39;-05:00&#39;}, regex=True)), ffs=autos.eng_dscr.str.contains(&#39;FFS&#39;), ) # debug .pipe(lambda df: display(df) or df) # display while continuing doing chaining .astype({ &#39;highway08&#39;: &#39;int8&#39;, &#39;city08&#39;: &#39;int16&#39;, &#39;comb08&#39;: &#39;int16&#39;, &#39;fuelCost08&#39;: &#39;int16&#39;, &#39;range&#39;: &#39;int16&#39;, &#39;year&#39;: &#39;int16&#39;, &#39;make&#39;: &#39;category&#39;}) .drop(columns=[&#39;trany&#39;, &#39;eng_dscr&#39;]) .pipe(get_var, &#39;processed_df&#39;) # store a processed copy of df ) autos2 = tweak_autos(autos) # can access those variables (old_df) and (processed_df) . city08 comb08 cylinders displ drive eng_dscr trany fuelCost08 highway08 make range year createdOn automatic speeds ffs . 0 19 | 21 | 4 | 2.000000 | Rear-Wheel Drive | (FFS) | Manual 5-spd | 2000 | 25 | Alfa Romeo | 0 | 1985 | 2013-01-01 00:00:00-05:00 | False | 5 | True | . 1 9 | 11 | 12 | 4.898438 | Rear-Wheel Drive | (GUZZLER) | Manual 5-spd | 3850 | 14 | Ferrari | 0 | 1985 | 2013-01-01 00:00:00-05:00 | False | 5 | False | . 2 23 | 27 | 4 | 2.199219 | Front-Wheel Drive | (FFS) | Manual 5-spd | 1550 | 33 | Dodge | 0 | 1985 | 2013-01-01 00:00:00-05:00 | False | 5 | True | . 3 10 | 11 | 8 | 5.199219 | Rear-Wheel Drive | NaN | Automatic 3-spd | 3850 | 12 | Dodge | 0 | 1985 | 2013-01-01 00:00:00-05:00 | True | 3 | NaN | . 4 17 | 19 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | (FFS,TRBO) | Manual 5-spd | 2700 | 23 | Subaru | 0 | 1993 | 2013-01-01 00:00:00-05:00 | False | 5 | True | . 5 21 | 22 | 4 | 1.799805 | Front-Wheel Drive | (FFS) | Automatic 3-spd | 1900 | 24 | Subaru | 0 | 1993 | 2013-01-01 00:00:00-05:00 | True | 3 | True | . 6 22 | 25 | 4 | 1.799805 | Front-Wheel Drive | (FFS) | Manual 5-spd | 1700 | 29 | Subaru | 0 | 1993 | 2013-01-01 00:00:00-05:00 | False | 5 | True | . 7 23 | 24 | 4 | 1.599609 | Front-Wheel Drive | (FFS) | Automatic 3-spd | 1750 | 26 | Toyota | 0 | 1993 | 2013-01-01 00:00:00-05:00 | True | 3 | True | . 8 23 | 26 | 4 | 1.599609 | Front-Wheel Drive | (FFS) | Manual 5-spd | 1600 | 31 | Toyota | 0 | 1993 | 2013-01-01 00:00:00-05:00 | False | 5 | True | . 9 23 | 25 | 4 | 1.799805 | Front-Wheel Drive | (FFS) | Automatic 4-spd | 1700 | 30 | Toyota | 0 | 1993 | 2013-01-01 00:00:00-05:00 | True | 4 | True | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 41134 18 | 20 | 4 | 2.099609 | Front-Wheel Drive | (FFS) | Manual 5-spd | 2100 | 24 | Saab | 0 | 1993 | 2013-01-01 00:00:00-05:00 | False | 5 | True | . 41135 23 | 26 | 4 | 1.900391 | Front-Wheel Drive | (TBI) (FFS) | Automatic 4-spd | 1600 | 33 | Saturn | 0 | 1993 | 2013-01-01 00:00:00-05:00 | True | 4 | True | . 41136 21 | 24 | 4 | 1.900391 | Front-Wheel Drive | (MFI) (FFS) | Automatic 4-spd | 1750 | 30 | Saturn | 0 | 1993 | 2013-01-01 00:00:00-05:00 | True | 4 | True | . 41137 24 | 28 | 4 | 1.900391 | Front-Wheel Drive | (TBI) (FFS) | Manual 5-spd | 1500 | 33 | Saturn | 0 | 1993 | 2013-01-01 00:00:00-05:00 | False | 5 | True | . 41138 21 | 25 | 4 | 1.900391 | Front-Wheel Drive | (MFI) (FFS) | Manual 5-spd | 1700 | 32 | Saturn | 0 | 1993 | 2013-01-01 00:00:00-05:00 | False | 5 | True | . 41139 19 | 22 | 4 | 2.199219 | Front-Wheel Drive | (FFS) | Automatic 4-spd | 1900 | 26 | Subaru | 0 | 1993 | 2013-01-01 00:00:00-05:00 | True | 4 | True | . 41140 20 | 23 | 4 | 2.199219 | Front-Wheel Drive | (FFS) | Manual 5-spd | 1850 | 28 | Subaru | 0 | 1993 | 2013-01-01 00:00:00-05:00 | False | 5 | True | . 41141 18 | 21 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | (FFS) | Automatic 4-spd | 2000 | 24 | Subaru | 0 | 1993 | 2013-01-01 00:00:00-05:00 | True | 4 | True | . 41142 18 | 21 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | (FFS) | Manual 5-spd | 2000 | 24 | Subaru | 0 | 1993 | 2013-01-01 00:00:00-05:00 | False | 5 | True | . 41143 16 | 18 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | (FFS,TRBO) | Automatic 4-spd | 2900 | 21 | Subaru | 0 | 1993 | 2013-01-01 00:00:00-05:00 | True | 4 | True | . 41144 rows × 16 columns . # don&#39;t use apply when dealing with numbers print(&quot;number&quot;) def to_lper100km(val): return 235.215/val %timeit autos2.city08.apply(to_lper100km) # 50% slower %timeit 235.215/autos2.city08 # levrage modern CPU architecture # even when data is categorical, don&#39;t use apply print(&quot;categorical&quot;) def is_american(val): return val in {&#39;Chevrolet&#39;, &#39;Ford&#39;, &#39;Dodge&#39;, &#39;GMC&#39;, &#39;Tesla&#39;} %timeit autos2.make.apply(is_american) %timeit autos2.make.isin({&#39;Chevrolet&#39;, &#39;Ford&#39;, &#39;Dodge&#39;, &#39;GMC&#39;, &#39;Tesla&#39;}) # however, when dealing with strings, apply could be faster # strings in pandas aren&#39;t optimized for speed # categorical makes it faster as you do the mapping from value to a category whereas strings is stores the entire value print(&quot;string&quot;) %timeit autos2.make.astype(str).apply(is_american) %timeit autos2.make.astype(str).isin({&#39;Chevrolet&#39;, &#39;Ford&#39;, &#39;Dodge&#39;, &#39;GMC&#39;, &#39;Tesla&#39;}) def country(val): if val in {&#39;Chevrolet&#39;, &#39;Ford&#39;, &#39;Dodge&#39;, &#39;GMC&#39;, &#39;Tesla&#39;}: return &#39;USA&#39; return &#39;Other&#39; values = {&#39;Chevrolet&#39;, &#39;Ford&#39;, &#39;Dodge&#39;, &#39;GMC&#39;, &#39;Tesla&#39;} . number 6.6 ms ± 81.5 µs per loop (mean ± std. dev. of 7 runs, 100 loops each) 110 µs ± 1.01 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each) categorical 810 µs ± 16.8 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) 536 µs ± 28.8 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) string 12.4 ms ± 330 µs per loop (mean ± std. dev. of 7 runs, 100 loops each) 8.21 ms ± 265 µs per loop (mean ± std. dev. of 7 runs, 100 loops each) . %%timeit ( autos2 .assign(country=autos2.make.apply(country)) ) . 1.82 ms ± 50.9 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) . %%timeit # if operating on number, it will be faster ( autos2 .assign(country=&#39;US&#39;) .assign(country=lambda df_:df_.country.where(df_.make.isin(values), &#39;Other&#39;)) ) . 5.12 ms ± 114 µs per loop (mean ± std. dev. of 7 runs, 100 loops each) . %%timeit ( autos2 .assign(country=np.select( [autos2.make.isin(values)], [&#39;US&#39;], &#39;Other&#39; )) ) . 3.74 ms ± 137 µs per loop (mean ± std. dev. of 7 runs, 100 loops each) . %%timeit ( autos2 .groupby(&#39;year&#39;) [[&#39;comb08&#39;, &#39;speeds&#39;]] .mean() ) . 1.56 ms ± 7.49 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) . %%timeit # order of column filtering/aggregation ( autos2 .groupby(&#39;year&#39;) .mean() [[&#39;comb08&#39;, &#39;speeds&#39;]] ) . 3.88 ms ± 53.7 µs per loop (mean ± std. dev. of 7 runs, 100 loops each) . ( autos2 .groupby(&#39;year&#39;) [[&#39;comb08&#39;, &#39;speeds&#39;]] # .mean() # .median() # .quantile(.99) # 99% quantile # .std() .var() .plot() ) . &lt;AxesSubplot:xlabel=&#39;year&#39;&gt; . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2021-08-22T01:07:44.416023 image/svg+xml Matplotlib v3.3.4, https://matplotlib.org/ def second_to_last(set): return set.iloc[-2] ( autos2 .assign(country=autos2.make.apply(country)) .groupby([&#39;year&#39;, &#39;country&#39;]) # two axises + frequency .agg([&#39;min&#39;, &#39;mean&#39;, second_to_last]) ) . city08 comb08 cylinders displ ... range automatic speeds ffs . min mean second_to_last min mean second_to_last min mean second_to_last min ... second_to_last min mean second_to_last min mean second_to_last min mean second_to_last . year country . 1984 Other 7 | 19.384615 | 14 | 8 | 21.417330 | 14 | 2 | 4.908046 | 4 | 1.000000 | ... | 0 | False | 0.550840 | False | 3 | 3.969054 | 5 | False | 0.714554 | True | . USA 8 | 16.079232 | 15 | 9 | 17.797119 | 17 | 4 | 6.033613 | 6 | 1.400391 | ... | 0 | False | 0.521059 | False | 3 | 3.872749 | 4 | False | 0.638801 | NaN | . 1985 Other 7 | 19.284768 | 19 | 8 | 21.373068 | 20 | 0 | 4.871965 | 4 | 0.000000 | ... | 0 | False | 0.554084 | True | 3 | 3.958057 | 4 | False | 0.889160 | True | . USA 8 | 16.275472 | 14 | 10 | 18.025157 | 15 | 3 | 5.949686 | 6 | 1.000000 | ... | 0 | False | 0.520755 | False | 3 | 3.886792 | 4 | False | 0.851351 | NaN | . 1986 Other 6 | 19.167183 | 10 | 7 | 21.213622 | 11 | 0 | 4.804954 | 6 | 1.000000 | ... | 0 | False | 0.520124 | False | 3 | 4.069659 | 4 | False | 0.934211 | NaN | . USA 9 | 15.945035 | 16 | 10 | 17.645390 | 17 | 3 | 6.136525 | 6 | 1.000000 | ... | 0 | False | 0.533688 | False | 3 | 3.886525 | 4 | False | 0.795699 | NaN | . 1987 Other 6 | 18.633381 | 12 | 7 | 20.710414 | 12 | 2 | 4.825963 | 4 | 1.000000 | ... | 0 | False | 0.516405 | True | 3 | 4.142653 | 4 | False | 0.949778 | True | . USA 8 | 15.611722 | 12 | 9 | 17.326007 | 13 | 3 | 6.164835 | 6 | 1.000000 | ... | 0 | False | 0.549451 | True | 3 | 3.902930 | 4 | False | 0.909457 | True | . 1988 Other 6 | 18.668224 | 12 | 7 | 20.814642 | 12 | 2 | 4.819315 | 4 | 1.000000 | ... | 0 | False | 0.521807 | True | 3 | 4.205607 | 4 | False | 0.993681 | True | . USA 8 | 15.577869 | 14 | 9 | 17.372951 | 14 | 3 | 6.307377 | 6 | 1.000000 | ... | 0 | False | 0.569672 | True | 3 | 4.028689 | 4 | False | 0.936306 | True | . ... ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 2016 Other 10 | 21.903749 | 28 | 12 | 24.439716 | 30 | 0 | 5.493414 | 4 | 0.000000 | ... | 0 | False | 0.837893 | True | 1 | 7.296859 | 7 | False | 0.000000 | False | . USA 11 | 25.061818 | 91 | 12 | 27.701818 | 93 | 0 | 5.356364 | 0 | 0.000000 | ... | 200 | False | 0.850909 | True | 1 | 6.301818 | 1 | False | 0.000000 | NaN | . 2017 Other 10 | 22.423795 | 21 | 11 | 24.910521 | 24 | 0 | 5.431662 | 4 | 0.000000 | ... | 0 | False | 0.848574 | True | 1 | 7.474926 | 7 | False | 0.000000 | False | . USA 11 | 24.003623 | 131 | 12 | 26.496377 | 126 | 0 | 5.532609 | 0 | 0.000000 | ... | 310 | False | 0.858696 | True | 0 | 6.304348 | 1 | False | 0.000000 | NaN | . 2018 Other 9 | 22.310442 | 11 | 11 | 24.779868 | 12 | 0 | 5.396990 | 8 | 0.000000 | ... | 0 | False | 0.863594 | True | 0 | 7.391345 | 0 | False | 0.000000 | NaN | . USA 11 | 23.526690 | 120 | 14 | 25.925267 | 116 | 0 | 5.597865 | 0 | 0.000000 | ... | 310 | False | 0.882562 | True | 0 | 5.601423 | 1 | False | 0.000000 | NaN | . 2019 Other 9 | 23.084221 | 19 | 11 | 25.456922 | 22 | 0 | 5.315586 | 6 | 0.000000 | ... | 0 | False | 0.879961 | True | 0 | 7.545983 | 8 | False | 0.000000 | NaN | . USA 11 | 24.169014 | 104 | 14 | 26.250000 | 104 | 0 | 5.559859 | 0 | 0.000000 | ... | 345 | False | 0.915493 | True | 0 | 5.647887 | 1 | False | 0.000000 | NaN | . 2020 Other 13 | 22.579487 | 17 | 15 | 25.174359 | 20 | 0 | 5.148718 | 6 | 0.000000 | ... | 0 | False | 0.871795 | True | 0 | 7.743590 | 0 | False | 0.000000 | False | . USA 20 | 24.071429 | 21 | 22 | 26.571429 | 24 | 4 | 4.000000 | 4 | 1.400391 | ... | 0 | False | 0.857143 | True | 0 | 7.785714 | 0 | False | 0.000000 | False | . 74 rows × 30 columns . # ( # autos2 # .assign(country=autos2.make.apply(country)) # .groupby([&#39;year&#39;, &#39;country&#39;]) # .mean() # .plot() # ) # solves it by unstacking print(&quot;solves it by unstacking&quot;) display(( autos2 .assign(country=autos2.make.apply(country)) .groupby([&#39;year&#39;, &#39;country&#39;]) .mean() .unstack() # rotate country (unstacking) by sticking it to the columns )) ( autos2 .assign(country=autos2.make.apply(country)) .groupby([&#39;year&#39;, &#39;country&#39;]) .mean() .unstack() # rotate country (unstacking) by sticking it to the columns .city08 # get the city08 column .plot() .legend(bbox_to_anchor=(1,1)) ) # smoothing the plot print(&quot;smoothing the plot&quot;) ( autos2 .assign(country=autos2.make.apply(country)) .groupby([&#39;year&#39;, &#39;country&#39;]) .mean() .unstack() # rotate country (unstacking) by sticking it to the columns .city08 # get the city08 column .rolling(2) # rolling window of 2, to smooth out the curve .mean() .plot() .legend(bbox_to_anchor=(1,1)) ) . solves it by unstacking . city08 comb08 cylinders displ fuelCost08 highway08 range speeds . country Other USA Other USA Other USA Other USA Other USA Other USA Other USA Other USA . year . 1984 19.384615 | 16.079232 | 21.417330 | 17.797119 | 4.908046 | 6.033613 | 2.691406 | 3.808594 | 2118.125553 | 2578.871549 | 24.847038 | 20.669868 | 0.000000 | 0.000000 | 3.969054 | 3.872749 | . 1985 19.284768 | 16.275472 | 21.373068 | 18.025157 | 4.871965 | 5.949686 | 2.636719 | 3.765625 | 2141.997792 | 2553.899371 | 24.816777 | 21.020126 | 0.000000 | 0.000000 | 3.958057 | 3.886792 | . 1986 19.167183 | 15.945035 | 21.213622 | 17.645390 | 4.804954 | 6.136525 | 2.537109 | 3.925781 | 2149.148607 | 2588.741135 | 24.650155 | 20.464539 | 0.000000 | 0.000000 | 4.069659 | 3.886525 | . 1987 18.633381 | 15.611722 | 20.710414 | 17.326007 | 4.825963 | 6.164835 | 2.583984 | 3.931641 | 2227.318117 | 2630.036630 | 24.186876 | 20.208791 | 0.000000 | 0.000000 | 4.142653 | 3.902930 | . 1988 18.668224 | 15.577869 | 20.814642 | 17.372951 | 4.819315 | 6.307377 | 2.531250 | 4.066406 | 2207.476636 | 2623.258197 | 24.437695 | 20.420082 | 0.000000 | 0.000000 | 4.205607 | 4.028689 | . 1989 18.533040 | 15.139831 | 20.662261 | 16.908898 | 4.879589 | 6.366525 | 2.542969 | 4.171875 | 2250.000000 | 2698.093220 | 24.252570 | 19.887712 | 0.000000 | 0.000000 | 4.264317 | 4.025424 | . 1990 18.510109 | 14.850575 | 20.640747 | 16.577011 | 4.839813 | 6.466667 | 2.507812 | 4.265625 | 2238.258165 | 2728.735632 | 24.267496 | 19.485057 | 0.000000 | 0.000000 | 4.328149 | 4.105747 | . 1991 18.087943 | 14.803279 | 20.174468 | 16.599532 | 5.029787 | 6.538642 | 2.609375 | 4.351562 | 2348.581560 | 2725.761124 | 23.809929 | 19.683841 | 0.000000 | 0.000000 | 4.341844 | 4.234192 | . 1992 17.915374 | 14.895631 | 20.098731 | 16.735437 | 5.145275 | 6.446602 | 2.708984 | 4.250000 | 2373.272214 | 2703.762136 | 23.820874 | 20.063107 | 0.000000 | 0.000000 | 4.356841 | 4.252427 | . 1993 18.084866 | 15.007772 | 20.309760 | 16.896373 | 5.114569 | 6.497409 | 2.683594 | 4.281250 | 2333.097595 | 2677.202073 | 24.172560 | 20.230570 | 0.000000 | 0.000000 | 4.371994 | 4.279793 | . 1994 18.046474 | 14.952514 | 20.264423 | 16.829609 | 5.185897 | 6.608939 | 2.712891 | 4.414062 | 2326.041667 | 2697.625698 | 24.173077 | 20.201117 | 0.000000 | 0.000000 | 4.355769 | 4.293296 | . 1995 17.678914 | 14.533724 | 20.091054 | 16.422287 | 5.444089 | 6.715543 | 2.908203 | 4.507812 | 2355.191693 | 2759.677419 | 24.263578 | 19.747801 | 0.000000 | 0.000000 | 4.380192 | 4.313783 | . 1996 18.480545 | 14.926641 | 20.906615 | 16.961390 | 5.147860 | 6.579151 | 2.708984 | 4.277344 | 2250.291829 | 2622.586873 | 25.093385 | 20.544402 | 0.000000 | 0.000000 | 4.416342 | 4.262548 | . 1997 18.090909 | 14.978632 | 20.509470 | 16.991453 | 5.261364 | 6.581197 | 2.787109 | 4.218750 | 2319.128788 | 2600.427350 | 24.678030 | 20.683761 | 0.000000 | 0.000000 | 4.452652 | 4.290598 | . 1998 17.925267 | 15.288000 | 20.457295 | 17.408000 | 5.275801 | 6.436000 | 2.800781 | 4.105469 | 2295.373665 | 2578.800000 | 24.704626 | 20.944000 | 0.144128 | 0.420000 | 4.485765 | 4.272000 | . 1999 17.925125 | 15.709163 | 20.386023 | 17.756972 | 5.377704 | 6.362550 | 2.832031 | 4.042969 | 2312.728785 | 2582.470120 | 24.577371 | 21.099602 | 0.251248 | 1.334661 | 4.507488 | 4.215139 | . 2000 17.881849 | 15.714844 | 20.301370 | 17.757812 | 5.441781 | 6.332031 | 2.859375 | 3.978516 | 2385.958904 | 2529.492188 | 24.416096 | 21.128906 | 0.304795 | 0.449219 | 4.619863 | 4.253906 | . 2001 17.941267 | 15.643939 | 20.289026 | 17.496212 | 5.479134 | 6.310606 | 2.873047 | 3.976562 | 2399.536321 | 2568.371212 | 24.372488 | 20.768939 | 0.187017 | 0.443182 | 4.761978 | 4.412879 | . 2002 17.644412 | 15.083916 | 20.076923 | 16.979021 | 5.576197 | 6.433566 | 2.935547 | 4.058594 | 2425.689405 | 2610.139860 | 24.207547 | 20.195804 | 0.137881 | 0.132867 | 4.920174 | 4.367133 | . 2003 17.565101 | 14.826087 | 19.953020 | 16.628763 | 5.683221 | 6.588629 | 3.031250 | 4.171875 | 2480.604027 | 2637.625418 | 24.052349 | 19.806020 | 0.127517 | 0.000000 | 5.154362 | 4.307692 | . 2004 17.426290 | 14.928571 | 19.923833 | 16.805195 | 5.729730 | 6.558442 | 3.087891 | 4.199219 | 2476.719902 | 2607.305195 | 24.160934 | 20.165584 | 0.000000 | 0.000000 | 5.229730 | 4.308442 | . 2005 17.412170 | 15.196610 | 19.892078 | 17.132203 | 5.773823 | 6.447458 | 3.152344 | 4.132812 | 2493.455798 | 2592.881356 | 24.189437 | 20.664407 | 0.000000 | 0.000000 | 5.362801 | 4.688136 | . 2006 17.062575 | 15.300366 | 19.509025 | 17.285714 | 5.977136 | 6.476190 | 3.345703 | 4.171875 | 2527.496992 | 2574.725275 | 23.762936 | 20.875458 | 0.000000 | 0.000000 | 5.492178 | 4.776557 | . 2007 16.996403 | 15.489726 | 19.452038 | 17.626712 | 6.044365 | 6.513699 | 3.423828 | 4.210938 | 2544.664269 | 2510.958904 | 23.742206 | 21.202055 | 0.000000 | 0.000000 | 5.864508 | 4.883562 | . 2008 17.239869 | 15.770073 | 19.677985 | 17.937956 | 6.095290 | 6.518248 | 3.462891 | 4.222656 | 2551.369113 | 2486.678832 | 23.983571 | 21.697080 | 0.109529 | 0.000000 | 5.969332 | 5.120438 | . 2009 17.696803 | 16.148014 | 20.186329 | 18.259928 | 5.970232 | 6.620939 | 3.402344 | 4.351562 | 2433.076075 | 2407.220217 | 24.590959 | 22.140794 | 0.000000 | 0.000000 | 6.189636 | 5.563177 | . 2010 18.325342 | 17.278970 | 20.851598 | 19.600858 | 5.897260 | 6.223176 | 3.357422 | 4.050781 | 2374.429224 | 2263.304721 | 25.256849 | 23.785408 | 0.000000 | 0.000000 | 6.378995 | 5.866953 | . 2011 19.247387 | 16.817844 | 21.635308 | 19.014870 | 5.851336 | 6.394052 | 3.320312 | 4.167969 | 2326.248548 | 2358.736059 | 25.855981 | 22.973978 | 0.340302 | 0.000000 | 6.714286 | 6.066914 | . 2012 19.838052 | 17.802974 | 22.339751 | 20.111524 | 5.792752 | 6.297398 | 3.269531 | 4.085938 | 2282.502831 | 2314.498141 | 26.695357 | 24.167286 | 0.634202 | 1.267658 | 6.834655 | 6.286245 | . 2013 20.982888 | 19.453815 | 23.471658 | 21.823293 | 5.658824 | 6.152610 | 3.179688 | 3.884766 | 2208.288770 | 2220.080321 | 27.860963 | 26.164659 | 0.853476 | 2.763052 | 7.033155 | 6.385542 | . 2014 21.159919 | 20.506329 | 23.655870 | 23.012658 | 5.719636 | 5.852321 | 3.210938 | 3.615234 | 2212.196356 | 2139.029536 | 28.088057 | 27.523207 | 0.859312 | 3.683544 | 7.210526 | 6.046414 | . 2015 21.350000 | 21.817490 | 23.935294 | 24.441065 | 5.604902 | 5.752852 | 3.101562 | 3.605469 | 2164.215686 | 2089.353612 | 28.481373 | 28.996198 | 0.638235 | 8.296578 | 7.211765 | 6.353612 | . 2016 21.903749 | 25.061818 | 24.439716 | 27.701818 | 5.493414 | 5.356364 | 2.992188 | 3.277344 | 2127.608916 | 1960.545455 | 28.866261 | 32.265455 | 1.017224 | 17.214545 | 7.296859 | 6.301818 | . 2017 22.423795 | 24.003623 | 24.910521 | 26.496377 | 5.431662 | 5.532609 | 2.919922 | 3.419922 | 2114.110128 | 2031.884058 | 29.208456 | 30.829710 | 1.243854 | 15.731884 | 7.474926 | 6.304348 | . 2018 22.310442 | 23.526690 | 24.779868 | 25.925267 | 5.396990 | 5.597865 | 2.886719 | 3.390625 | 2121.448730 | 2037.900356 | 29.042333 | 30.145907 | 1.135466 | 12.537367 | 7.391345 | 5.601423 | . 2019 23.084221 | 24.169014 | 25.456922 | 26.250000 | 5.315586 | 5.559859 | 2.839844 | 3.419922 | 2093.659245 | 2093.133803 | 29.560503 | 30.042254 | 2.581801 | 16.419014 | 7.545983 | 5.647887 | . 2020 22.579487 | 24.071429 | 25.174359 | 26.571429 | 5.148718 | 4.000000 | 2.693359 | 1.978516 | 2050.256410 | 1650.000000 | 29.543590 | 30.642857 | 2.446154 | 0.000000 | 7.743590 | 7.785714 | . smoothing the plot . &lt;matplotlib.legend.Legend at 0x7ff9f02a8bb0&gt; . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2021-08-22T01:07:45.149580 image/svg+xml Matplotlib v3.3.4, https://matplotlib.org/ &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2021-08-22T01:07:45.384723 image/svg+xml Matplotlib v3.3.4, https://matplotlib.org/ def vals_gt(df_, num): return df_[df_.gt(num)].dropna() ( autos2 .assign(country=autos2.make.apply(country)) .groupby([&#39;year&#39;, &#39;country&#39;]) .count() .pipe(vals_gt, 700) ) . city08 comb08 cylinders displ drive fuelCost08 highway08 make range createdOn automatic speeds ffs . year country . 1984 Other 1131.0 | 1131.0 | 1131.0 | 1131.0 | 1131.0 | 1131.0 | 1131.0 | 1131.0 | 1131.0 | 1131.0 | 1131.0 | 1131.0 | 1065.0 | . 1985 Other 906.0 | 906.0 | 906.0 | 906.0 | 906.0 | 906.0 | 906.0 | 906.0 | 906.0 | 906.0 | 906.0 | 906.0 | 821.0 | . 1991 Other 705.0 | 705.0 | 705.0 | 705.0 | 705.0 | 705.0 | 705.0 | 705.0 | 705.0 | 705.0 | 705.0 | 705.0 | 705.0 | . 1992 Other 709.0 | 709.0 | 709.0 | 709.0 | 709.0 | 709.0 | 709.0 | 709.0 | 709.0 | 709.0 | 709.0 | 709.0 | 707.0 | . 1993 Other 707.0 | 707.0 | 707.0 | 707.0 | 707.0 | 707.0 | 707.0 | 707.0 | 707.0 | 707.0 | 707.0 | 707.0 | 707.0 | . 2017 Other 1017.0 | 1017.0 | 1017.0 | 1017.0 | 1017.0 | 1017.0 | 1017.0 | 1017.0 | 1017.0 | 1017.0 | 1017.0 | 1017.0 | 766.0 | . 2018 Other 1063.0 | 1063.0 | 1063.0 | 1063.0 | 1063.0 | 1063.0 | 1063.0 | 1063.0 | 1063.0 | 1063.0 | 1063.0 | 1063.0 | 844.0 | . 2019 Other 1033.0 | 1033.0 | 1033.0 | 1033.0 | 1033.0 | 1033.0 | 1033.0 | 1033.0 | 1033.0 | 1033.0 | 1033.0 | 1033.0 | 855.0 | .",
            "url": "https://sudomaze.dev/2021/08/29/effective-pandas.html",
            "relUrl": "/2021/08/29/effective-pandas.html",
            "date": " • Aug 29, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://sudomaze.dev/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://sudomaze.dev/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://sudomaze.dev/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sudomaze.dev/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}